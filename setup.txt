vim: set spell spelllang=en_us colorcolumn=81:hi ColorColumn ctermbg=224
Server setup
- Preface ................................................................ [000]
- Website building script ................................................ [001]
- Basic server configuration ............................................. [002]
- Setting up a git server ................................................ [003]
- WireGuard server ....................................................... [004]
- IPSEC server ........................................................... [005]
- Mail server (no dovecot) ............................................... [006]
- HTTP server ............................................................ [007]
- Relayd setup ........................................................... [008]

[000] Preface ------------------------------------------------------------------
For the hosting provider, I chose RackNerd. They're incredibly cheap ($40/yr!)
and I've had good experience with them in the past. I can't really claim to be a
BSD expert, but I do have quite a bit of Linux sysadmin experience, so you
shouldn't take my word as gospel, but it should get you started. This is a
recreation of my previous setup, now on a slightly more powerful server. I chose
OpenBSD because of the great networking with `{pf(4)}`, the "secure by default"
mentality, and the phenomenal man-pages. I wanted a BSD specifically because of
the tight integration between all software in the base system.

[001] Setting up the website building script -----------------------------------
I ripped a good portion of it from #/github.com/kisslinux/kisslinux.github.io,
and reformatted all of the `{sed}` expressions to work with BRE
instead of ERE. I also don't expect to host KISS packages, at least in this
repository, so I entirely removed `{pkg()}`. I haven't tested it with a POSIX sh
(dash doesn't count), so I explicitly set it to run with KSH, although I've
tested it with Bash as well and it works there. The specific KSH flavor was
Cygwin's MKSH, but it should function on any KSH93 derivative. I'd like to
convert it to a proper Makefile, but I may keep it as a shell script so that I
can use automatic file discovery.

[002] Setting up the server ----------------------------------------------------
Because I don't care if it's stable or not, I'm running -current. During install
answer the following then continue with installation: ```{
Location of sets? (cd0 disk http nfs or 'done') [http]
*{...}*
Server directory? [pub/OpenBSD/7.6/amd64] pub/OpenBSD/snapshots/amd64
}```
Then prepare to build ```{
user mod -G wsrc build
cd /usr
mkdir -p src ports
chgrp wsrc src ports
chmod 775 src ports
cp /etc/examples/doas.conf /etc/
doas -su build
## build kernel
cd src
## build base
cd ../ports
## build ports
}```
`{cvs}` is recommended to track the source changes, so ```{
cd /usr
cvs -qd anoncvs@anoncvs1.usa.openbsd.org:/cvs checkout -P src
}```
I prefer the `{fish}` shell and `{vim}`, so ```{
pkg_add fish vim--no_x11-perl-python3-ruby htop
cp /etc/examples/{doas,man}.conf /etc/
echo manpath /usr/local/share/fish/man/ >> /etc/man.conf
for i in ruby bundle bundler erb gem irb racc rake rbs rdbg rdoc ri suggest
typeprof; do
ln -sf /usr/local/bin/${i}33 /usr/local/bin/$i
done
chsh -s /usr/local/bin/fish root}```

[003] Setting up a git/got server ----------------------------------------------
TODO

[004] Setting up a WireGuard server --------------------------------------------
WireGuard is a reasonably lightweight VPN protocol that's fast and uses
"state-of-the-art cryptography." My main purpose for this network is to provide
a static encrypted link to my server, and access to any devices connected to it
such as my PC or PowerBook. WireGuard support is built-in to the OpenBSD kernel,
so `{wireguard-tools}` is only needed if you haven't generated keys already.
I've created a pair of shell scripts for automating the creation of a server and
peers, at $/scripts/wgmkpeer.sh and $/scripts/wgmkserver.sh. For automatic
configuration at boot, and easy reloading, you'll need a `{hostname.if(5)}` file
such as `{/etc/hostname.wg0}` with the lines ```{
inet *{localip}* *{netmask}* NONE
up

!/usr/local/bin/wg setconf wg0 /etc/wireguard/wg0.conf
}```
Now you can `{sh /etc/netstart wg0}` to reload the interface with new peers

[005] Setting up an IPSEC/L2TP server ------------------------------------------
IPSEC is a pair of protocols intended to secure IP packets. This is gonna be a
straight up rip from my friend's page hs DOT bam DOT moe/guides/diy_vpns.html.
Edit the relevant lines in `{/etc/npppd/npppd.conf}` to be
```{
tunnel L2TP protocol l2tp {
	*{...}*
	pipex yes
}

ipcp IPCP {
	pool-address *{ipstart}*-*{ipend}* # such as 198.18.0.2-198.18.0.254
}

interface pppac0 *{address}* ipcp IPCP
}```
Now set `{/etc/ipsec.conf}` to the following. A preshared key can be a
simple password or generated by `{openssl}` with `{openssl rand -hex 20}`.
```{
ike passive esp transport from *{externalip}* to any \
	main group "modp2048" quick group "modp2048" \
	psk "*{preshared key}*"
}```
Some users are necessary, so create them in `{/etc/npppd/npppd-users}`:
```{
testuser:\
	:password=password123:
}```
Finally, enable in-kernel PPP handling, IP forwarding, and IP GRE with:
```{
cat >> /etc/sysctl.conf <<EOF
net.inet.ip.forwarding=1
net.inet6.ip6.forwarding=1
net.inet.gre.allow=1
net.pipex.enable=1
EOF
sysctl net.inet.ip.forwarding=1 net.inet6.ip6.forwarding=1 \
net.inet.gre.allow=1 net.pipex.enable=1
}```
Then just enable the services, and you're good to go:
```{
chmod 0600 /etc/ipsec.conf
rcctl enable ipsec isakmpd npppd
rcctl set isakmpd flags -K
rcctl start isakmpd npppd
}```
